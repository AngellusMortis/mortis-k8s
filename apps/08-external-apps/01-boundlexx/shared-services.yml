# kubectl apply -f manifests/install/1008-boundlexx/02-shared-services.yml


# redis
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: boundlexx
spec:
  selector:
    matchLabels:
      app: redis
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 999
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          seccompProfile:
            type: "RuntimeDefault"
          capabilities:
            drop: ["ALL"]
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            cpu: 250m
            memory: 250Mi
          limits:
            cpu: 1
            memory: 4000Mi
        livenessProbe:
          tcpSocket:
            port: redis
          initialDelaySeconds: 1
          timeoutSeconds: 5
          periodSeconds: 5
          failureThreshold: 5
          successThreshold: 1
        readinessProbe:
          exec:
            command: ["redis-cli", "ping"]
          initialDelaySeconds: 3
          timeoutSeconds: 5
          periodSeconds: 3
        volumeMounts:
        - name: ephemeral
          mountPath: "/data"
      volumes:
      - name: ephemeral
        emptyDir:
          sizeLimit: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: boundlexx
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: redis
---
# rabbitmq
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: boundlexx
spec:
  selector:
    matchLabels:
      app: rabbitmq
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3.8-management
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 999
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          seccompProfile:
            type: "RuntimeDefault"
          capabilities:
            drop: ["ALL"]
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: rabbitmq
        - name: RABBITMQ_DEFAULT_PASS
          value: rabbitmq
        ports:
        - containerPort: 5672
          name: rabbitmq
        resources:
          requests:
            cpu: 250m
            memory: 250Mi
          limits:
            cpu: 2000m
            memory: 1000Mi
        livenessProbe:
          tcpSocket:
            port: rabbitmq
          initialDelaySeconds: 3
          timeoutSeconds: 5
          periodSeconds: 5
          failureThreshold: 5
          successThreshold: 1
        readinessProbe:
          exec:
            command: ["rabbitmq-diagnostics", "-q", "check_running"]
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: boundlexx
spec:
  selector:
    app: rabbitmq
  ports:
    - protocol: TCP
      port: 5672
      targetPort: rabbitmq
---
# postgres
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: boundlexx
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      imagePullSecrets:
      - name: ghcr-login-secret
      containers:
      - name: postgres
        image: ghcr.io/angellusmortis/boundlexx_postgres:latest
        imagePullPolicy: IfNotPresent
        command: ["docker-entrypoint.sh"]
        args: ["postgres", "-c", "max_connections=1000", "-c", "shared_buffers=31000MB"]
        securityContext:
          runAsUser: 70
          runAsGroup: 4
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          seccompProfile:
            type: "RuntimeDefault"
          capabilities:
            drop: ["ALL"]
        envFrom:
        - configMapRef:
            name: boundlexx-config
        - secretRef:
            name: boundlexx-secrets
        ports:
        - containerPort: 5432
          name: postgres
        resources:
          requests:
            cpu: 2000m
            memory: 4000Mi
          limits:
            cpu: 10000m
            memory: 32000Mi
        livenessProbe:
          tcpSocket:
            port: postgres
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 5
          failureThreshold: 5
          successThreshold: 1
        readinessProbe:
          exec:
            command: ["bash", "-c", "psql -w -U $POSTGRES_USER -d $POSTGRES_DB -c SELECT 1"]
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 3
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres
  volumeClaimTemplates:
  - metadata:
      name: postgres
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: longhorn
      resources:
        requests:
          storage: 500Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: boundlexx
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: postgres
