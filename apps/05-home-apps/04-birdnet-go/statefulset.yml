apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: birdnet
  namespace: default
  annotations:
      keel.sh/policy: "all"
      keel.sh/pollSchedule: "@every 12h"
      keel.sh/trigger: "poll"
  labels:
      app.kubernetes.io/component: node
      app.kubernetes.io/instance: birdnet
      app.kubernetes.io/name: birdnet
      app.kubernetes.io/part-of: birdnet
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: node
      app.kubernetes.io/instance: birdnet
      app.kubernetes.io/name: birdnet
  serviceName: birdnet
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/component: node
        app.kubernetes.io/instance: birdnet
        app.kubernetes.io/name: birdnet
        app.kubernetes.io/part-of: birdnet
    spec:
      containers:
      - name: birdnet
        image: ghcr.io/tphakala/birdnet-go:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: birdnet
        - containerPort: 8090
          name: metrics
        volumeMounts:
          - name: birdnet
            mountPath: /config
            subPath: config
          - name: birdnet
            mountPath: /data
            subPath: data
        resources:
          requests:
            cpu: "1000m"
            memory: "1000Mi"
          limits:
            cpu: "1000m"
            memory: "1000Mi"
        securityContext:
          allowPrivilegeEscalation: false
          # runAsNonRoot: true
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: RuntimeDefault
  volumeClaimTemplates:
  - metadata:
      name: birdnet
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: longhorn
      resources:
        requests:
          storage: 100Gi
