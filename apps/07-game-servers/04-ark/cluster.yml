apiVersion: apps/v1
kind: Deployment
metadata:
  name: ark-operator
  namespace: games
  labels:
    app.kubernetes.io/name: ark-operator
    app.kubernetes.io/instance: ark-operator
    app.kubernetes.io/version: v0.3.1
    app.kubernetes.io/component: operator
    app.kubernetes.io/part-of: ark-operator
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: ark-operator
      app.kubernetes.io/instance: ark-operator
      app.kubernetes.io/component: operator
      app.kubernetes.io/part-of: ark-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ark-operator
        app.kubernetes.io/instance: ark-operator
        app.kubernetes.io/version: v0.3.1
        app.kubernetes.io/component: operator
        app.kubernetes.io/part-of: ark-operator
    spec:
      containers:
      - name: app
        image: ghcr.io/angellusmortis/ark-operator:v0.3.1
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
          allowPrivilegeEscalation: false
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          requests:
            cpu: "200m"
            memory: "400Mi"
          limits:
            cpu: "2000m"
            memory: "4000Mi"
        livenessProbe:
          tcpSocket:
            port: http
          initialDelaySeconds: 10
          timeoutSeconds: 1
          periodSeconds: 5
          failureThreshold: 5
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 10
          timeoutSeconds: 1
          periodSeconds: 5
          failureThreshold: 20
          successThreshold: 1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: games
  name: ark-operator
  labels:
    app.kubernetes.io/name: ark-operator
    app.kubernetes.io/instance: ark-operator
    app.kubernetes.io/version: v0.3.1
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: ark-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ark-operator-role-cluster
  labels:
    app.kubernetes.io/name: ark-operator
    app.kubernetes.io/instance: ark-operator
    app.kubernetes.io/version: v0.3.1
    app.kubernetes.io/component: cluster-role
    app.kubernetes.io/part-of: ark-operator
rules:
  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [kopf.dev]
    resources: [clusterkopfpeerings]
    verbs: [list, watch, patch, get]

  # Framework: runtime observation of namespaces & CRDs (addition/deletion).
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [list, watch]
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [list, watch]

  # Application: read-only access for watching cluster-wide.
  - apiGroups: [mort.is]
    resources: [arkclusters]
    verbs: [list, watch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: games
  name: ark-operator-role-namespaced
  labels:
    app.kubernetes.io/name: ark-operator
    app.kubernetes.io/instance: ark-operator
    app.kubernetes.io/version: v0.3.1
    app.kubernetes.io/component: role
    app.kubernetes.io/part-of: ark-operator
rules:

  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [kopf.dev]
    resources: [kopfpeerings]
    verbs: [list, watch, patch, get]

  # Framework: posting the events about the handlers progress/errors.
  - apiGroups: [""]
    resources: [events]
    verbs: [create]

  # Application: watching & handling for the custom resource we declare.
  - apiGroups: [mort.is]
    resources: [arkclusters]
    verbs: [list, watch, patch]

  # Application: other resources it produces and manipulates.
  - apiGroups: [batch, extensions]
    resources: [jobs]
    verbs: ["*"]
  - apiGroups: [""]
    resources: [pods, persistentvolumeclaims]
    verbs: ["*"]
  - apiGroups: [mort.is]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ark-operator-rolebinding-cluster
  labels:
    app.kubernetes.io/name: ark-operator
    app.kubernetes.io/instance: ark-operator
    app.kubernetes.io/version: v0.3.1
    app.kubernetes.io/component: cluster-role-binding
    app.kubernetes.io/part-of: ark-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ark-operator-role-cluster
subjects:
  - kind: ServiceAccount
    name: ark-operator
    namespace: games
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: games
  name: ark-operator-rolebinding-namespaced
  labels:
    app.kubernetes.io/name: ark-operator
    app.kubernetes.io/instance: ark-operator
    app.kubernetes.io/version: v0.3.1
    app.kubernetes.io/component: role-binding
    app.kubernetes.io/part-of: ark-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ark-operator-role-namespaced
subjects:
  - kind: ServiceAccount
    name: ark-operator
---
apiVersion: mort.is/v1beta1
kind: ArkCluster
metadata:
  name: ark
  namespace: games
  labels:
    app.kubernetes.io/name: arkcluster
    app.kubernetes.io/instance: ark
    app.kubernetes.io/version: v0.3.1
    app.kubernetes.io/component: cluster
spec:
  server:
    size: 50Gi
    persist: true
    maps: [ "@official" ]
    gamePortStart: 7780
    rconPortStart: 27020
    maxPlayers: 10
    battleye: false
    allowedPlatforms: [ ALL ]
    whitelist: true
    storageClass: longhorn-games
  data:
    persist: true
    size: 100Gi
  cluster:
    clusterID: mortis
  runAsUser: 1000
  runAsGroup: 1000
  nodeSelector:
    kubernetes.io/hostname: games-1
  tolerations:
    - key: "type"
      operator: "Equal"
      value: "gamesOnly"
      effect: "PreferNoSchedule"
